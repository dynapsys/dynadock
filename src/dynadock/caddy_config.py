from __future__ import annotations

import logging
import os
import subprocess
from pathlib import Path
from typing import Dict, Any, List

import docker

from .utils import render_template
from jinja2 import Template

logger = logging.getLogger('dynadock.caddy_config')

__all__ = ["CaddyConfig"]

CADDYFILE_TEMPLATE = """
# Dynamic Caddyfile generated by DynaDock – do not edit manually 

{
    email admin@{{ domain }}
    {% if not enable_tls %}
    auto_https off
    {% endif %}
}

# Health endpoint on port 80 (always plain HTTP)
:80 {
    respond /health "OK" 200
}

# HTTPS Health endpoint
https://localhost/health {
    {% if enable_tls %}
    tls /etc/caddy/certs/_wildcard.dynadock.lan+2.pem /etc/caddy/certs/_wildcard.dynadock.lan+2-key.pem
    {% endif %}
    respond "OK" 200
}

{% for service, data in services.items() %}
# ------------------------------
# Service: {{ service }}    ({{ data.ip }}:{{ data.port }})
# ------------------------------
{{ service }}.{{ domain }} {
    {% if enable_tls %}
    tls /etc/caddy/certs/_wildcard.dynadock.lan+2.pem /etc/caddy/certs/_wildcard.dynadock.lan+2-key.pem
    {% endif %}

    header {
        Access-Control-Allow-Origin "{{ cors_origins|join(', ') }}"
        Access-Control-Allow-Methods "GET,POST,PUT,DELETE,OPTIONS,PATCH"
        Access-Control-Allow-Headers "*"
        Access-Control-Allow-Credentials "true"
        Access-Control-Max-Age "3600"
    }

    @options method OPTIONS
    respond @options 204

    reverse_proxy {{ data.ip }}:{{ data.port }}

    log {
        output file /var/log/caddy/{{ service }}.log
        format json
        level info
    }
}
{% endfor %}
"""

class CaddyConfig:
    """Generate *Caddyfile* and manage the Caddy container."""

    _CONTAINER_NAME = "dynadock-caddy"

    def __init__(self, project_dir: str, domain: str, enable_tls: bool = True):
        self.project_dir = Path(project_dir)
        self.domain = domain
        self.enable_tls = enable_tls
        self.config_dir = self.project_dir / "caddy_config"
        self.data_dir = self.project_dir / "caddy_data"
        self.caddy_dir = self.project_dir / ".dynadock" / "caddy"
        self.caddyfile_path = self.config_dir / "caddy" / "Caddyfile"
        self.client = docker.from_env()
        
        # Ensure directories exist
        self.caddy_dir.mkdir(parents=True, exist_ok=True)
        
        logger.info(f" CaddyConfig initialized for domain: {domain}")
        logger.debug(f" TLS enabled: {enable_tls}")
        logger.debug(f" Config directory: {self.config_dir}")
        logger.debug(f" Data directory: {self.data_dir}")
        logger.debug(f" Caddy directory: {self.caddy_dir}")

    def generate(
        self,
        services: Dict[str, Any],
        ports: Dict[str, int],
        domain: str,
        enable_tls: bool,
        cors_origins: List[str],
        ips: Dict[str, str] | None,
    ) -> Path:
        """Render the full Caddyfile template."""
        logger.info(f"🔧 Generating Caddyfile for {len(services)} services")
        logger.debug(f"📊 Services: {list(services.keys())}")
        logger.debug(f"🔌 Port mappings: {ports}")
        logger.debug(f"🌐 IP mappings: {ips}")
        
        template = Template(CADDYFILE_TEMPLATE)
        service_data = {s: {"port": p, "ip": ips.get(s)} for s, p in ports.items()}

        caddyfile_content = template.render(
            domain=self.domain,
            enable_tls=self.enable_tls,
            services=service_data,
            cors_origins=cors_origins or [
                "http://localhost:3000",
                "http://localhost:5173",
                f"https://*.{self.domain}",
            ],
        )
        caddyfile_path = self.caddy_dir / "Caddyfile"
        with caddyfile_path.open("w", encoding="utf-8") as fp:
            fp.write(caddyfile_content)
        for sub in ("data", "config", "logs"):
            (self.caddy_dir / sub).mkdir(exist_ok=True)
        return caddyfile_path

    def generate_minimal(self) -> Path:
        """Generate a minimal Caddyfile to start the container."""
        caddyfile_content = "# Minimal Caddyfile for DynaDock startup"
        caddyfile_path = self.caddy_dir / "Caddyfile"
        with caddyfile_path.open("w", encoding="utf-8") as fp:
            fp.write(caddyfile_content)
        for sub in ("data", "config", "logs"):
            (self.caddy_dir / sub).mkdir(exist_ok=True)
        return caddyfile_path

    def is_running(self) -> bool:
        """Check if the Caddy container is running."""
        try:
            container = self.client.containers.get(self._CONTAINER_NAME)
            return container.status == "running"
        except docker.errors.NotFound:
            return False

    def start_caddy(self) -> None:
        """Start the Caddy container if it is not already running."""
        if self.is_running():
            return

        self.stop_caddy()  # Ensure any stopped containers are removed

        # Get the project root to find certs directory
        project_root = self.project_dir.parent.parent if "examples" in str(self.project_dir) else self.project_dir
        certs_dir = project_root / "certs"
        
        cmd = [
            "docker", "run", "-d",
            "--name", self._CONTAINER_NAME,
            "-p", "80:80",
            "-p", "443:443",
            "-p", "2019:2019",
            "-v", f"{self.caddy_dir}:/etc/caddy",
            "-v", f"{self.caddy_dir}/data:/data",
            "-v", f"{self.caddy_dir}/logs:/var/log/caddy",
            "-v", f"{certs_dir}:/etc/caddy/certs:ro",
            "caddy:2-alpine",
            "caddy", "run", "--config", "/etc/caddy/Caddyfile",
        ]
        subprocess.run(cmd, check=True, capture_output=True)

    def reload_caddy(self) -> None:
        """Reload the Caddy configuration in a running container."""
        if not self.is_running():
            return

        cmd = [
            "docker", "exec", self._CONTAINER_NAME,
            "caddy", "reload", "--config", "/etc/caddy/Caddyfile",
        ]
        subprocess.run(cmd, check=True, capture_output=True)

    def stop_caddy(self) -> None:
        """Stop and remove the Caddy container if it exists."""
        try:
            container = self.client.containers.get(self._CONTAINER_NAME)
            container.remove(force=True)
        except docker.errors.NotFound:
            pass
